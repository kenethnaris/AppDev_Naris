{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyObxlrtUqSpAp0GBe5UQgtu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Exercide Number 1:"],"metadata":{"id":"otWUUTdg2id0"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9sc6Iu8i2VeY","executionInfo":{"status":"ok","timestamp":1713773378586,"user_tz":-480,"elapsed":25,"user":{"displayName":"Keneth Naris","userId":"03556197800181632721"}},"outputId":"44d01beb-b0b0-4b58-8785-6a711bebbdc9"},"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 6, 9]\n"]}],"source":["# Create an empty list\n","numbers = []\n","\n","# Add numbers using append\n","numbers.append(4)\n","numbers.append(6)\n","numbers.append(9)\n","\n","# Print the list\n","print(numbers)\n"]},{"cell_type":"markdown","source":["Exercise Number 2:\n","\n"],"metadata":{"id":"w5GwRPb329TE"}},{"cell_type":"code","source":["# Using the range function to generate numbers from 0 to 10\n","numbers = list(range(11))  # range(11) generates numbers from 0 to 10\n","\n","# Print the list\n","print(numbers)\n"],"metadata":{"id":"D_PMsYGz28fR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Exercise Number 3:"],"metadata":{"id":"3p112BQB2zXn"}},{"cell_type":"code","source":["# Create a list containing the valid grade values\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","# Iterate over the indices and items using enumerate\n","for index, grade in enumerate(grades):\n","    print(index, grade)\n"],"metadata":{"id":"ew7P4Iy92z35"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Exercise Number 4:"],"metadata":{"id":"p4h8uXpG3JNY"}},{"cell_type":"code","source":["# Create a list containing the valid grade values\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","# Use index slicing to print grades higher than 2.0\n","print(grades[grades.index(2.25):])  # Assuming 2.25 is the first grade higher than 2.0\n"],"metadata":{"id":"bFVNWkgZ3JsY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Exercise Number 5:"],"metadata":{"id":"72GemJ1j3NUr"}},{"cell_type":"code","source":["# Create a list containing the valid grade values\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","# Find the index of grade 2.0\n","index_2_0 = grades.index(2.0)\n","\n","# Use index slicing to print grades better than 2.0\n","print(grades[index_2_0 + 1:])\n"],"metadata":{"id":"Tf_C528f3NvC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Exercise Number 6:\n"],"metadata":{"id":"EXRUQJuW3XX7"}},{"cell_type":"code","source":["# Create a list containing the valid grade values\n","grades = [1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 2.5, 3.0]\n","\n","# Use index slicing to print the grades 2.0, 2.25, and 2.5\n","print(grades[grades.index(2.0):grades.index(2.5) + 1])\n"],"metadata":{"id":"nhqpjqW83Xvs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["CHALLENGE:"],"metadata":{"id":"2wBLS_7WMoih"}},{"cell_type":"code","source":["fhand = open('mboxt-short.txt')\n","timestamps = []\n","for line in fhand:\n","    line = line.rstrip()\n","    if line.startswith('Date:'):\n","        words = line.split()\n","        timestamp = ' '.join(words[1:])\n","        timestamps.append(timestamp)\n","print(timestamps)\n"],"metadata":{"id":"IFguVMejMpMU"},"execution_count":null,"outputs":[]}]}